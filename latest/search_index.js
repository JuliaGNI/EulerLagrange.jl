var documenterSearchIndex = {"docs":
[{"location":"degenerate_lagrangian/#Degenerate-Lagrangian-Systems","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"CurrentModule = EulerLagrange","category":"page"},{"location":"library/#Euler-Lagrange-Library-Functions","page":"Library","title":"Euler-Lagrange Library Functions","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [EulerLagrange]","category":"page"},{"location":"library/#EulerLagrange.DegenerateLagrangianSystem","page":"Library","title":"EulerLagrange.DegenerateLagrangianSystem","text":"DegenerateLagrangianSystem\n\n\n\n\n\n","category":"type"},{"location":"library/#EulerLagrange.HamiltonianSystem","page":"Library","title":"EulerLagrange.HamiltonianSystem","text":"HamiltonianSystem\n\n\n\n\n\n","category":"type"},{"location":"library/#EulerLagrange.LagrangianSystem","page":"Library","title":"EulerLagrange.LagrangianSystem","text":"LagrangianSystem\n\n\n\n\n\n","category":"type"},{"location":"hamiltonian/#Hamiltonian-Systems","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"","category":"section"},{"location":"caveats/#Caveats","page":"Caveats","title":"Caveats","text":"","category":"section"},{"location":"caveats/","page":"Caveats","title":"Caveats","text":"The Hamiltonian or Lagrangian should be provided in a form as simple as possible to aid the symbolic algebra system. Many expressions lead to involved symbolic expressions that can be hard to differentiate and lead to errors in the code generation pipeline.","category":"page"},{"location":"caveats/","page":"Caveats","title":"Caveats","text":"For example, scalar products should be specified as x ⋅ x and not as x' * x. As the transposition also entails complex conjugation, the resulting symbolic expression is substantially more complicated, which can cause problems down the line.","category":"page"},{"location":"caveats/","page":"Caveats","title":"Caveats","text":"Another potential problem is an array operation, like the dot product, that is preceded by scalar multiplication like in α * x ⋅ x. This can cause problems due to the order of operations, which is (α * x) ⋅ x, where first x is rescaled by α, implying the creation of a temporary array holding the result, which is then contracted with x. This should rather be expressed as x ⋅ x * α or α * (x ⋅ x), where the scalar product is computed first and then the result, which now is just a scalar, is multiplied by α.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = EulerLagrange","category":"page"},{"location":"#Euler-Lagrange","page":"Home","title":"Euler-Lagrange","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package generates code for the Euler-Lagrange equations as well as Hamilton's equations for GeometricIntegrators.jl and related packages.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EulerLagrange.jl and all of its dependencies can be installed via the Julia REPL by typing ","category":"page"},{"location":"","page":"Home","title":"Home","text":"]add EulerLagrange","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using EulerLagrange.jl is very simple and typically consists of four to five steps:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Obtain symbolic variables for a Lagrangian or Hamiltonian system of a given dimension.\nObtain a symbolic representation of the parameters of the system if it has any.\nBuild the Lagrangian or Hamiltonian using those symbolic variables and parameters.\nConstruct a LagrangianSystem or HamiltonianSystem, which is where the actual code generation happens.\nGenerate a LODEProblem or HODEProblem that can then be solved with GeometricIntegrators.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Details for the specific system types can be found on the following pages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"hamiltonian.md\",\n    \"lagrangian.md\",\n    \"degenerate_lagrangian.md\",\n    \"caveats.md\",\n]","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use EulerLagrange.jl in your work, please consider citing it by","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{Kraus:2023:EulerLagrange,\n  title={EulerLagrange.jl: Code generation for Euler-Lagrange equations in Julia},\n  author={Kraus, Michael},\n  year={2023},\n  howpublished={\\url{https://github.com/JuliaGNI/EulerLagrange.jl}},\n  doi={10.5281/zenodo.8241048}\n}","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"CurrentModule = EulerLagrange","category":"page"},{"location":"lagrangian/#Lagrangian-Systems","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"","category":"section"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"The Euler-Lagrange equations, that is the dynamical equations of a Lagrangian system, are given in terms of the Lagrangian L(xv) by","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"fracddt fracpartial Lpartial v - fracpartial Lpartial x ","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"For regular (i.e. non-degenerate) Lagrangians, this is a set of second-order ordinary differential equations. In many numerical applications, it is advantageous to solve the implicit form of these equations, given by","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"beginalign\nfracd varthetadt = f  \nvartheta = fracpartial Lpartial v  \nf = fracpartial Lpartial x \nendalign","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"In the following, we show how these equations can be obtained for the example of a particle in a square potential.","category":"page"},{"location":"lagrangian/#Particle-in-a-potential","page":"Lagrangian Systems","title":"Particle in a potential","text":"","category":"section"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"Before any use, we need to load EulerLagrange:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"using EulerLagrange","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"Next, we generate symbolic variables for a one-dimensional system:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"t, x, v = lagrangian_variables(2)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"With those variables, we can construct a Lagrangian","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"using LinearAlgebra\nL = v ⋅ v / 2 - x ⋅ x / 2","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"This Lagrangian together with the symbolic variables is then used to construct a LagrangianSystem:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"lag_sys = LagrangianSystem(L, t, x, v)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"The constructor computes the Euler-Lagrange equations and generates the corresponding Julia code. In the last step, we can now construct a LODEProblem from the LagrangianSystem and some appropriate initial conditions, a time span to integrate over and a time step:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"tspan = (0.0, 10.0)\ntstep = 0.1\n\nq₀ = [1.0, 1.0]\np₀ = [0.5, 2.0]\n\nlprob = LODEProblem(lag_sys, tspan, tstep, q₀, p₀)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"Should we fancy so, we can integrate this system using GeometricIntegrators:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"using GeometricIntegrators\nsol = integrate(lprob, Gauss(1))\n\nusing CairoMakie\nfig = lines(sol.q[:,1], sol.q[:,2];\n    axis = (; xlabel = \"x₁\", ylabel = \"x₂\", title = \"Particle moving in a square potential\"),\n    figure = (; size = (800,600), fontsize = 22))\nsave(\"particle_vi.svg\", fig); nothing # hide","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"(Image: )","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"using CairoMakie\nusing EulerLagrange\nusing LinearAlgebra\nusing GeometricIntegrators\n\nt, x, v = lagrangian_variables(2)\n\ntspan = (0.0, 10.0)\ntstep = 0.1\n\nq₀ = [1.0, 1.0]\np₀ = [0.5, 2.0]","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"We can also include parametric dependencies in the Lagrangian. Consider, for example, a parameter α that determines the strength of the potential.","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"The easiest way, to account for parameters, is to create a named tuple with typical values for each parameters, e.g.,","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"params = (α = 5.0,)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"In the next step, we use the function symbolize to generate a symbolic version of the parameters:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"sparams = symbolize(params)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"Now we modify the Lagrangian to account for the parameter:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"L = v ⋅ v / 2 - sparams.α * (x ⋅ x) / 2","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"From here on, everything follows along the same lines as before, the only difference being that we also need to pass the symbolic parameters sparams to the LagrangianSystem constructor:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"lag_sys = EulerLagrange.LagrangianSystem(L, t, x, v, sparams)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"Analogously, we need to pass actual parameter values params to the LODEProblem constructor via the parameters keyword argument:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"lprob = LODEProblem(lag_sys, tspan, tstep, q₀, p₀; parameters = params)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"This problem can again be integrated using GeometricIntegrators:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"sol = integrate(lprob, Gauss(1))\n\nfig = lines(sol.q[:,1], sol.q[:,2];\n    axis = (; xlabel = \"x₁\", ylabel = \"x₂\", title = \"Particle moving in a square potential\"),\n    figure = (; size = (800,600), fontsize = 22))\nsave(\"particle_vi_param.svg\", fig); nothing # hide","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"(Image: )","category":"page"}]
}
