var documenterSearchIndex = {"docs":
[{"location":"degenerate_lagrangian/#Degenerate-Lagrangian-Systems","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"","category":"section"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"A Lagrangian L(xv) is said to be degenerate if the determinant of the Hessian with respect to the velocities vanishes, i.e.,","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"leftvert fracpartial^2 Lpartial v^i  partial v^j rightvert = 0 ","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"The Euler-Lagrange equations,","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"fracddt fracpartial Lpartial v - fracpartial Lpartial x = 0 ","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"of such Lagrangians are a set of first-order ordinary differential equations and not second-order differential equations as for non-degenerate Lagrangians.","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"Of particular interest in various applications are degenerate Lagrangians of the form","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"L(xv) = vartheta(x) cdot v - H (x) ","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"Their Euler-Lagrange equations take the form","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"fracd varthetadt (x) = nabla vartheta(x) cdot v - nabla H (x) ","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"We exemplify this with the Lotka-Volterra problem in 2d.","category":"page"},{"location":"degenerate_lagrangian/#Lotka-Volterra","page":"Degenerate Lagrangian Systems","title":"Lotka-Volterra","text":"","category":"section"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"Before any use, we need to load EulerLagrange:","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"using EulerLagrange\nusing LinearAlgebra","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"Next, we generate symbolic variables for a two-dimensional Lagrangian system:","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"t, x, v = lagrangian_variables(2)","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"We define a named tuple with typical values for the parameters, e.g.,","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"params = (\n    a₁ = -1.0,\n    a₂ = -1.0,\n    b₁ = 1.0,\n    b₂ = 2.0,\n)","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"We use the function symbolize to generate a symbolic version of the parameters:","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"sparams = symbolize(params)","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"Define the Hamiltonian function and the symplectic potential:","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"ϑ(x, params) = [log(x[2]) / x[1] / 2, - log(x[1]) / x[2] / 2]\nH(x, params) = params.a₁ * x[1] + params.a₂ * x[2] + params.b₁ * log(x[1]) + params.b₂ * log(x[2])","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"The Hamiltonian and the symplectic potential, evaluated on and together with the symbolic variables and parameters are used to construct a DegenerateLagrangianSystem:","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"lag_sys = DegenerateLagrangianSystem(ϑ(x,sparams) ⋅ v, H(x,sparams), t, x, v, sparams)","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"The constructor computes the Euler-Lagrange equations and generates the corresponding Julia code.","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"In the last step, we can now construct a LODEProblem from the LagrangianSystem and some appropriate initial conditions, a time span to integrate over and a time step:","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"tspan = (0.0, 10.0)\ntstep = 0.01\n\nq₀ = [2.0, 1.0]\np₀ = ϑ(q₀, params)\n\nlprob = LODEProblem(lag_sys, tspan, tstep, q₀, p₀; parameters = params)","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"We can integrate this system using GeometricIntegrators:","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"using GeometricIntegrators\nsol = integrate(lprob, Gauss(1))\n\nusing CairoMakie\nfig = lines(parent(sol.q[:,1]), parent(sol.q[:,2]);\n    axis = (; xlabel = \"x₁\", ylabel = \"x₂\", title = \"Lotka-Volterra system in 2d\"),\n    figure = (; size = (800,600), fontsize = 22))\nsave(\"lotka-volterra.svg\", fig); nothing # hide","category":"page"},{"location":"degenerate_lagrangian/","page":"Degenerate Lagrangian Systems","title":"Degenerate Lagrangian Systems","text":"(Image: )","category":"page"},{"location":"library/","page":"Library","title":"Library","text":"CurrentModule = EulerLagrange","category":"page"},{"location":"library/#Euler-Lagrange-Library-Functions","page":"Library","title":"Euler-Lagrange Library Functions","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [EulerLagrange]","category":"page"},{"location":"library/#EulerLagrange.DegenerateLagrangianSystem","page":"Library","title":"EulerLagrange.DegenerateLagrangianSystem","text":"DegenerateLagrangianSystem\n\n\n\n\n\n","category":"type"},{"location":"library/#EulerLagrange.HamiltonianSystem","page":"Library","title":"EulerLagrange.HamiltonianSystem","text":"HamiltonianSystem\n\n\n\n\n\n","category":"type"},{"location":"library/#EulerLagrange.LagrangianSystem","page":"Library","title":"EulerLagrange.LagrangianSystem","text":"LagrangianSystem\n\n\n\n\n\n","category":"type"},{"location":"hamiltonian/#Hamiltonian-Systems","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"","category":"section"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"Hamilton's equations of motion are given in terms of the Hamiltonian H(qp) by","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"beginalign*\nfracdqdt = fracpartial Hpartial p  \nfracdpdt = - fracpartial Hpartial q \nendalign*","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"In the following, we show how these equations can be obtained for the example of a harmonic oscillator.","category":"page"},{"location":"hamiltonian/#Harmonic-Oscillator","page":"Hamiltonian Systems","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"Before any use, we need to load EulerLagrange:","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"using EulerLagrange","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"Next, we generate symbolic variables for a one-dimensional Hamiltonian system:","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"t, q, p = hamiltonian_variables(1)","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"We define a named tuple with typical values for the parameters, e.g.,","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"params = (k=0.5, ω=√0.5)","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"We use the function symbolize to generate a symbolic version of the parameters:","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"sparams = symbolize(params)","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"Now we can define the Hamiltonian function:","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"using LinearAlgebra\nH(t, q, p, params) = p ⋅ p / 2 + params.k * (q ⋅ q) / 2","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"The Hamiltonian, evaluated on and together with the symbolic variables and parameters is used to construct a HamiltonianSystem:","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"ham_sys = HamiltonianSystem(H(t, q, p, sparams), t, q, p, sparams)","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"The constructor computes Hamilton's equations and generates the corresponding Julia code. In the last step, we can now construct a HODEProblem from the HamiltonianSystem and some appropriate initial conditions, a time span to integrate over and a time step:","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"tspan = (0.0, 10.0)\ntstep = 0.01\nq₀, p₀ = [0.5], [0.0]\n\nhprob = HODEProblem(ham_sys, tspan, tstep, q₀, p₀; parameters = params)","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"We can integrate this system using GeometricIntegrators:","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"using GeometricIntegrators\nsol = integrate(hprob, Gauss(1))\n\nusing CairoMakie\nfig = lines(parent(sol.q[:,1]), parent(sol.p[:,1]);\n    axis = (; xlabel = \"q₁\", ylabel = \"p₁\", title = \"Harmonic Oscillator\"),\n    figure = (; size = (800,600), fontsize = 22))\nsave(\"harmonic-oscillator-hamiltonian.svg\", fig); nothing # hide","category":"page"},{"location":"hamiltonian/","page":"Hamiltonian Systems","title":"Hamiltonian Systems","text":"(Image: )","category":"page"},{"location":"caveats/#Caveats","page":"Caveats","title":"Caveats","text":"","category":"section"},{"location":"caveats/","page":"Caveats","title":"Caveats","text":"In the following, we sketch some caveats and limitations of the package that may be useful to be aware of.","category":"page"},{"location":"caveats/#Simplicity","page":"Caveats","title":"Simplicity","text":"","category":"section"},{"location":"caveats/","page":"Caveats","title":"Caveats","text":"The Hamiltonian or Lagrangian should be provided in a form as simple as possible to aid the symbolic algebra system. Many expressions lead to involved symbolic expressions that can be hard to differentiate and lead to errors in the code generation pipeline.","category":"page"},{"location":"caveats/","page":"Caveats","title":"Caveats","text":"For example, scalar products should be specified as x ⋅ x and not as x' * x. As the transposition also entails complex conjugation, the resulting symbolic expression is substantially more complicated, which can cause problems down the line.","category":"page"},{"location":"caveats/","page":"Caveats","title":"Caveats","text":"Another potential problem is an array operation, like the dot product, that is preceded by scalar multiplication like in α * x ⋅ x. This can cause problems due to the order of operations, which is (α * x) ⋅ x, where first x is rescaled by α, implying the creation of a temporary array holding the result, which is then contracted with x. This should rather be expressed as x ⋅ x * α or α * (x ⋅ x), where the scalar product is computed first and then the result, which now is just a scalar, is multiplied by α.","category":"page"},{"location":"caveats/#Parameters","page":"Caveats","title":"Parameters","text":"","category":"section"},{"location":"caveats/","page":"Caveats","title":"Caveats","text":"The handling of parameters requires some massaging of the code generated by Symbolics.jl. To facilitate this, symbolic parameters get ₚ attached to their names.","category":"page"},{"location":"caveats/#Initial-Guesses","page":"Caveats","title":"Initial Guesses","text":"","category":"section"},{"location":"caveats/","page":"Caveats","title":"Caveats","text":"For some problems, in particular regular Lagrangian systems, it is in general not straightforward to automatically compute a first-order system of equations to be used as an initial guess for x in GeometricIntegrators. To circumvent this issue, it is possible to manually specify a function that computes the vector field ẋ to the LODE and LODEProblem constructors via the v̄ keyword. It is also possible to provide a vector field for the initial guess of p via the f̄ keyword, although this is usually not necessary as ṗ can be derived automatically. The same keyword arguments exist for the respective constructors of degenerate Lagrangian systems, although also here the vector fields are provided by default.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = EulerLagrange","category":"page"},{"location":"#Euler-Lagrange","page":"Home","title":"Euler-Lagrange","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package generates code for the Euler-Lagrange equations as well as Hamilton's equations for GeometricIntegrators.jl and related packages.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EulerLagrange.jl and all of its dependencies can be installed via the Julia REPL by typing ","category":"page"},{"location":"","page":"Home","title":"Home","text":"]add EulerLagrange","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using EulerLagrange.jl is very simple and typically consists of four to five steps:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Obtain symbolic variables for a Lagrangian or Hamiltonian system of a given dimension.\nObtain a symbolic representation of the parameters of the system if it has any.\nBuild the Lagrangian or Hamiltonian using those symbolic variables and parameters.\nConstruct a LagrangianSystem or HamiltonianSystem, which is where the actual code generation happens.\nGenerate a LODEProblem or HODEProblem that can then be solved with GeometricIntegrators.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Details for the specific system types can be found on the following pages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"hamiltonian.md\",\n    \"lagrangian.md\",\n    \"degenerate_lagrangian.md\",\n    \"caveats.md\",\n]","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use EulerLagrange.jl in your work, please consider citing it by","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{Kraus:2023:EulerLagrange,\n  title={EulerLagrange.jl: Code generation for Euler-Lagrange equations in Julia},\n  author={Kraus, Michael},\n  year={2023},\n  howpublished={\\url{https://github.com/JuliaGNI/EulerLagrange.jl}},\n  doi={10.5281/zenodo.8241048}\n}","category":"page"},{"location":"lagrangian/#Lagrangian-Systems","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"","category":"section"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"The Euler-Lagrange equations, that is the dynamical equations of a Lagrangian system, are given in terms of the Lagrangian L(xv) by","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"fracddt fracpartial Lpartial v - fracpartial Lpartial x = 0 ","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"For regular (i.e. non-degenerate) Lagrangians, this is a set of second-order ordinary differential equations. In many numerical applications, it is advantageous to solve the implicit form of these equations, given by","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"beginalign*\nfracd varthetadt = f  \nvartheta = fracpartial Lpartial v  \nf = fracpartial Lpartial x \nendalign*","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"In the following, we show how these equations can be obtained for the example of a particle in a square potential.","category":"page"},{"location":"lagrangian/#Particle-in-a-potential","page":"Lagrangian Systems","title":"Particle in a potential","text":"","category":"section"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"Before any use, we need to load EulerLagrange:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"using EulerLagrange","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"Next, we generate symbolic variables for a two-dimensional system:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"t, x, v = lagrangian_variables(2)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"With those variables, we can construct a Lagrangian","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"using LinearAlgebra\nL = v ⋅ v / 2 - x ⋅ x / 2","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"This Lagrangian together with the symbolic variables is then used to construct a LagrangianSystem:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"lag_sys = LagrangianSystem(L, t, x, v)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"The constructor computes the Euler-Lagrange equations and generates the corresponding Julia code. In the last step, we can now construct a LODEProblem from the LagrangianSystem and some appropriate initial conditions, a time span to integrate over and a time step:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"tspan = (0.0, 10.0)\ntstep = 0.01\n\nq₀ = [1.0, 1.0]\np₀ = [0.5, 2.0]\n\nlprob = LODEProblem(lag_sys, tspan, tstep, q₀, p₀)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"We can integrate this system using GeometricIntegrators:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"using GeometricIntegrators\nsol = integrate(lprob, Gauss(1))\n\nusing CairoMakie\nfig = lines(parent(sol.q[:,1]), parent(sol.q[:,2]);\n    axis = (; xlabel = \"x₁\", ylabel = \"x₂\", title = \"Particle moving in a square potential\"),\n    figure = (; size = (800,600), fontsize = 22))\nsave(\"particle_vi.svg\", fig); nothing # hide","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"(Image: )","category":"page"},{"location":"lagrangian/#Parameters","page":"Lagrangian Systems","title":"Parameters","text":"","category":"section"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"We can also include parametric dependencies in the Lagrangian. Consider, for example, a parameter α that determines the strength of the potential.","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"The easiest way, to account for parameters, is to create a named tuple with typical values for each parameter, e.g.,","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"params = (α = 5.0,)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"In the next step, we use the function symbolize to generate a symbolic version of the parameters:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"sparams = symbolize(params)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"Now we modify the Lagrangian to account for the parameter:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"L = v ⋅ v / 2 - sparams.α * (x ⋅ x) / 2","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"From here on, everything follows along the same lines as before, the only difference being that we also need to pass the symbolic parameters sparams to the LagrangianSystem constructor:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"lag_sys = LagrangianSystem(L, t, x, v, sparams)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"Analogously, we need to pass actual parameter values params to the LODEProblem constructor via the parameters keyword argument:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"lprob = LODEProblem(lag_sys, tspan, tstep, q₀, p₀; parameters = params)","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"This problem can again be integrated using GeometricIntegrators:","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"sol = integrate(lprob, Gauss(1))\n\nfig = lines(parent(sol.q[:,1]), parent(sol.q[:,2]);\n    axis = (; xlabel = \"x₁\", ylabel = \"x₂\", title = \"Particle moving in a square potential\"),\n    figure = (; size = (800,600), fontsize = 22))\nsave(\"particle_vi_param.svg\", fig); nothing # hide","category":"page"},{"location":"lagrangian/","page":"Lagrangian Systems","title":"Lagrangian Systems","text":"(Image: )","category":"page"}]
}
